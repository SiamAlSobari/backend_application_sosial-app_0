// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @unique @default(uuid())
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //relasi
  profile         Profile?
  post            Post[]
  Followers       Follower[]      @relation("UserFollowers")
  Followings      Follower[]      @relation("UserFollowings")
  sendRequest     FollowRequest[] @relation("SenderRequest")
  receiverRequest FollowRequest[] @relation("ReceiverRequest")
  like            Like[]
  Comment         Comment[]
}

model Follower {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String

  //relasi
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model FollowRequest {
  id          String   @id @unique @default(uuid())
  created_at  DateTime @default(now())
  sender_id   String
  receiver_id String

  //relasi
  sender   User @relation("SenderRequest", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User @relation("ReceiverRequest", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@unique([sender_id, receiver_id])
}

model Profile {
  id            String  @id @unique @default(uuid())
  user_name     String  @unique
  name          String
  bio           String? @db.Text
  pekerjaan     String?
  pendidikan    String?
  alamat        String?
  tanggal_lahir String?
  gender        String?
  website       String?
  is_public     Boolean @default(true)
  avatar_image  String  @default("https://hwchamber.co.uk/wp-content/uploads/2022/04/avatar-placeholder.gif")
  cover_image   String  @default("https://img.freepik.com/free-photo/smooth-black-paper-textured-background_53876-160610.jpg?semt=ais_hybrid&w=740")
  user_id       String  @unique

  //relasi
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post {
  id         String   @id @unique @default(uuid())
  caption    String?  @db.Text
  is_public  Boolean  @default(true)
  created_at DateTime @default(now())
  user_id    String

  //relasi
  user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  media   Media[]
  like    Like[]
  Comment Comment[]
}

model Media {
  id      String  @id @unique @default(uuid())
  url     String
  type    String?
  post_id String

  //relasi
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Like {
  id         String   @id @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String
  post_id    String

  //relasi
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
}

model Comment {
  id         String   @id @unique @default(uuid())
  caption    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime

  user_id   String
  parent_id String?
  post_id   String

  //relasi
  user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReply", fields: [parent_id], references: [id])
  Comment Comment[] @relation("CommentReply")
}
